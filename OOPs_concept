from abc import ABC, abstractmethod

class Payment(ABC):
    def __init__(self, amount):
        self.amount = amount
    @abstractmethod
    def pay(self):
        pass

class UPIPayment(Payment):
    def __init__(self, amount, upi_id):
        super().__init__(amount)
        self.__upi_id = upi_id

    def pay(self):
        hidden_id = self.__upi_id[-8:]
        print(f"Processing UPI payment of {self.amount} from ID: {hidden_id}")


class CreditCardPayment(Payment):
    def __init__(self, amount, card_number):
        super().__init__(amount)
        self.__card_number = card_number

    def pay(self):
        hidden_number = self.__card_number[-4:]
        print(f"Processing credit card payment of {self.amount} from card ending with: {hidden_number}")

class Transaction:
    def start(self):
        print("1. UPI")
        print("2. Credit Card")
        choice = int(input("Choose your payment method from 1 or 2: "))
        amount = int(input("Please enter your payment amount: "))


        if choice == 1:
            upi_id = input("Please enter your UPI ID : ")
            payment = UPIPayment(amount, upi_id)
        elif choice == 2:
            card_number = input("Please enter your card number : ")
            payment = CreditCardPayment(amount, card_number)
        else:
            print("Please choose a valid option!")
            return

        payment.pay()

t = Transaction()
t.start()

